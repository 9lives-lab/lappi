// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `collection.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:FoldersRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FoldersRow {
    // message fields
    // @@protoc_insertion_point(field:FoldersRow.folder_id)
    pub folder_id: i64,
    // @@protoc_insertion_point(field:FoldersRow.parent_folder_id)
    pub parent_folder_id: i64,
    // @@protoc_insertion_point(field:FoldersRow.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:FoldersRow.folder_type)
    pub folder_type: i32,
    // @@protoc_insertion_point(field:FoldersRow.avatar_picture_id)
    pub avatar_picture_id: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:FoldersRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FoldersRow {
    fn default() -> &'a FoldersRow {
        <FoldersRow as ::protobuf::Message>::default_instance()
    }
}

impl FoldersRow {
    pub fn new() -> FoldersRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "folder_id",
            |m: &FoldersRow| { &m.folder_id },
            |m: &mut FoldersRow| { &mut m.folder_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent_folder_id",
            |m: &FoldersRow| { &m.parent_folder_id },
            |m: &mut FoldersRow| { &mut m.parent_folder_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &FoldersRow| { &m.name },
            |m: &mut FoldersRow| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "folder_type",
            |m: &FoldersRow| { &m.folder_type },
            |m: &mut FoldersRow| { &mut m.folder_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "avatar_picture_id",
            |m: &FoldersRow| { &m.avatar_picture_id },
            |m: &mut FoldersRow| { &mut m.avatar_picture_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FoldersRow>(
            "FoldersRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FoldersRow {
    const NAME: &'static str = "FoldersRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.folder_id = is.read_int64()?;
                },
                16 => {
                    self.parent_folder_id = is.read_int64()?;
                },
                26 => {
                    self.name = is.read_string()?;
                },
                32 => {
                    self.folder_type = is.read_int32()?;
                },
                40 => {
                    self.avatar_picture_id = ::std::option::Option::Some(is.read_int64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.folder_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.folder_id);
        }
        if self.parent_folder_id != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.parent_folder_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.folder_type != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.folder_type);
        }
        if let Some(v) = self.avatar_picture_id {
            my_size += ::protobuf::rt::int64_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.folder_id != 0 {
            os.write_int64(1, self.folder_id)?;
        }
        if self.parent_folder_id != 0 {
            os.write_int64(2, self.parent_folder_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.folder_type != 0 {
            os.write_int32(4, self.folder_type)?;
        }
        if let Some(v) = self.avatar_picture_id {
            os.write_int64(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FoldersRow {
        FoldersRow::new()
    }

    fn clear(&mut self) {
        self.folder_id = 0;
        self.parent_folder_id = 0;
        self.name.clear();
        self.folder_type = 0;
        self.avatar_picture_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FoldersRow {
        static instance: FoldersRow = FoldersRow {
            folder_id: 0,
            parent_folder_id: 0,
            name: ::std::string::String::new(),
            folder_type: 0,
            avatar_picture_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FoldersRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FoldersRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FoldersRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FoldersRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:InternalFilesRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InternalFilesRow {
    // message fields
    // @@protoc_insertion_point(field:InternalFilesRow.file_id)
    pub file_id: i64,
    // @@protoc_insertion_point(field:InternalFilesRow.internal_path)
    pub internal_path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:InternalFilesRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InternalFilesRow {
    fn default() -> &'a InternalFilesRow {
        <InternalFilesRow as ::protobuf::Message>::default_instance()
    }
}

impl InternalFilesRow {
    pub fn new() -> InternalFilesRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_id",
            |m: &InternalFilesRow| { &m.file_id },
            |m: &mut InternalFilesRow| { &mut m.file_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "internal_path",
            |m: &InternalFilesRow| { &m.internal_path },
            |m: &mut InternalFilesRow| { &mut m.internal_path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InternalFilesRow>(
            "InternalFilesRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InternalFilesRow {
    const NAME: &'static str = "InternalFilesRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.file_id = is.read_int64()?;
                },
                18 => {
                    self.internal_path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.file_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.file_id);
        }
        if !self.internal_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.internal_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.file_id != 0 {
            os.write_int64(1, self.file_id)?;
        }
        if !self.internal_path.is_empty() {
            os.write_string(2, &self.internal_path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InternalFilesRow {
        InternalFilesRow::new()
    }

    fn clear(&mut self) {
        self.file_id = 0;
        self.internal_path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InternalFilesRow {
        static instance: InternalFilesRow = InternalFilesRow {
            file_id: 0,
            internal_path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InternalFilesRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InternalFilesRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InternalFilesRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InternalFilesRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MusicItemsRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MusicItemsRow {
    // message fields
    // @@protoc_insertion_point(field:MusicItemsRow.music_item_id)
    pub music_item_id: i64,
    // @@protoc_insertion_point(field:MusicItemsRow.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:MusicItemsRow.folder_id)
    pub folder_id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:MusicItemsRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MusicItemsRow {
    fn default() -> &'a MusicItemsRow {
        <MusicItemsRow as ::protobuf::Message>::default_instance()
    }
}

impl MusicItemsRow {
    pub fn new() -> MusicItemsRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "music_item_id",
            |m: &MusicItemsRow| { &m.music_item_id },
            |m: &mut MusicItemsRow| { &mut m.music_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &MusicItemsRow| { &m.name },
            |m: &mut MusicItemsRow| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "folder_id",
            |m: &MusicItemsRow| { &m.folder_id },
            |m: &mut MusicItemsRow| { &mut m.folder_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MusicItemsRow>(
            "MusicItemsRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MusicItemsRow {
    const NAME: &'static str = "MusicItemsRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.music_item_id = is.read_int64()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.folder_id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.music_item_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.music_item_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.folder_id != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.folder_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.music_item_id != 0 {
            os.write_int64(1, self.music_item_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.folder_id != 0 {
            os.write_int64(3, self.folder_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MusicItemsRow {
        MusicItemsRow::new()
    }

    fn clear(&mut self) {
        self.music_item_id = 0;
        self.name.clear();
        self.folder_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MusicItemsRow {
        static instance: MusicItemsRow = MusicItemsRow {
            music_item_id: 0,
            name: ::std::string::String::new(),
            folder_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MusicItemsRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MusicItemsRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MusicItemsRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MusicItemsRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:LyricsItemsRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LyricsItemsRow {
    // message fields
    // @@protoc_insertion_point(field:LyricsItemsRow.lyrics_item_id)
    pub lyrics_item_id: i64,
    // @@protoc_insertion_point(field:LyricsItemsRow.music_item_id)
    pub music_item_id: i64,
    // @@protoc_insertion_point(field:LyricsItemsRow.lang_code)
    pub lang_code: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:LyricsItemsRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LyricsItemsRow {
    fn default() -> &'a LyricsItemsRow {
        <LyricsItemsRow as ::protobuf::Message>::default_instance()
    }
}

impl LyricsItemsRow {
    pub fn new() -> LyricsItemsRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lyrics_item_id",
            |m: &LyricsItemsRow| { &m.lyrics_item_id },
            |m: &mut LyricsItemsRow| { &mut m.lyrics_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "music_item_id",
            |m: &LyricsItemsRow| { &m.music_item_id },
            |m: &mut LyricsItemsRow| { &mut m.music_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lang_code",
            |m: &LyricsItemsRow| { &m.lang_code },
            |m: &mut LyricsItemsRow| { &mut m.lang_code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LyricsItemsRow>(
            "LyricsItemsRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LyricsItemsRow {
    const NAME: &'static str = "LyricsItemsRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.lyrics_item_id = is.read_int64()?;
                },
                16 => {
                    self.music_item_id = is.read_int64()?;
                },
                26 => {
                    self.lang_code = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.lyrics_item_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.lyrics_item_id);
        }
        if self.music_item_id != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.music_item_id);
        }
        if !self.lang_code.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.lang_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.lyrics_item_id != 0 {
            os.write_int64(1, self.lyrics_item_id)?;
        }
        if self.music_item_id != 0 {
            os.write_int64(2, self.music_item_id)?;
        }
        if !self.lang_code.is_empty() {
            os.write_string(3, &self.lang_code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LyricsItemsRow {
        LyricsItemsRow::new()
    }

    fn clear(&mut self) {
        self.lyrics_item_id = 0;
        self.music_item_id = 0;
        self.lang_code.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LyricsItemsRow {
        static instance: LyricsItemsRow = LyricsItemsRow {
            lyrics_item_id: 0,
            music_item_id: 0,
            lang_code: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LyricsItemsRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LyricsItemsRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LyricsItemsRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LyricsItemsRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PictureItemsRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PictureItemsRow {
    // message fields
    // @@protoc_insertion_point(field:PictureItemsRow.id)
    pub id: i64,
    // @@protoc_insertion_point(field:PictureItemsRow.folder_id)
    pub folder_id: i64,
    // @@protoc_insertion_point(field:PictureItemsRow.internal_file_id)
    pub internal_file_id: i64,
    // @@protoc_insertion_point(field:PictureItemsRow.picture_type)
    pub picture_type: ::protobuf::EnumOrUnknown<PictureType>,
    // special fields
    // @@protoc_insertion_point(special_field:PictureItemsRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PictureItemsRow {
    fn default() -> &'a PictureItemsRow {
        <PictureItemsRow as ::protobuf::Message>::default_instance()
    }
}

impl PictureItemsRow {
    pub fn new() -> PictureItemsRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PictureItemsRow| { &m.id },
            |m: &mut PictureItemsRow| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "folder_id",
            |m: &PictureItemsRow| { &m.folder_id },
            |m: &mut PictureItemsRow| { &mut m.folder_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "internal_file_id",
            |m: &PictureItemsRow| { &m.internal_file_id },
            |m: &mut PictureItemsRow| { &mut m.internal_file_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "picture_type",
            |m: &PictureItemsRow| { &m.picture_type },
            |m: &mut PictureItemsRow| { &mut m.picture_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PictureItemsRow>(
            "PictureItemsRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PictureItemsRow {
    const NAME: &'static str = "PictureItemsRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                24 => {
                    self.folder_id = is.read_int64()?;
                },
                32 => {
                    self.internal_file_id = is.read_int64()?;
                },
                40 => {
                    self.picture_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if self.folder_id != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.folder_id);
        }
        if self.internal_file_id != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.internal_file_id);
        }
        if self.picture_type != ::protobuf::EnumOrUnknown::new(PictureType::JPG) {
            my_size += ::protobuf::rt::int32_size(5, self.picture_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if self.folder_id != 0 {
            os.write_int64(3, self.folder_id)?;
        }
        if self.internal_file_id != 0 {
            os.write_int64(4, self.internal_file_id)?;
        }
        if self.picture_type != ::protobuf::EnumOrUnknown::new(PictureType::JPG) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.picture_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PictureItemsRow {
        PictureItemsRow::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.folder_id = 0;
        self.internal_file_id = 0;
        self.picture_type = ::protobuf::EnumOrUnknown::new(PictureType::JPG);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PictureItemsRow {
        static instance: PictureItemsRow = PictureItemsRow {
            id: 0,
            folder_id: 0,
            internal_file_id: 0,
            picture_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PictureItemsRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PictureItemsRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PictureItemsRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PictureItemsRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:TagsRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TagsRow {
    // message fields
    // @@protoc_insertion_point(field:TagsRow.tag_id)
    pub tag_id: i64,
    // @@protoc_insertion_point(field:TagsRow.music_item_id)
    pub music_item_id: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:TagsRow.folder_id)
    pub folder_id: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:TagsRow.tag_name)
    pub tag_name: ::std::string::String,
    // @@protoc_insertion_point(field:TagsRow.string_value)
    pub string_value: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:TagsRow.int_value)
    pub int_value: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:TagsRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TagsRow {
    fn default() -> &'a TagsRow {
        <TagsRow as ::protobuf::Message>::default_instance()
    }
}

impl TagsRow {
    pub fn new() -> TagsRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag_id",
            |m: &TagsRow| { &m.tag_id },
            |m: &mut TagsRow| { &mut m.tag_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "music_item_id",
            |m: &TagsRow| { &m.music_item_id },
            |m: &mut TagsRow| { &mut m.music_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "folder_id",
            |m: &TagsRow| { &m.folder_id },
            |m: &mut TagsRow| { &mut m.folder_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tag_name",
            |m: &TagsRow| { &m.tag_name },
            |m: &mut TagsRow| { &mut m.tag_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "string_value",
            |m: &TagsRow| { &m.string_value },
            |m: &mut TagsRow| { &mut m.string_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "int_value",
            |m: &TagsRow| { &m.int_value },
            |m: &mut TagsRow| { &mut m.int_value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TagsRow>(
            "TagsRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TagsRow {
    const NAME: &'static str = "TagsRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.tag_id = is.read_int64()?;
                },
                16 => {
                    self.music_item_id = ::std::option::Option::Some(is.read_int64()?);
                },
                24 => {
                    self.folder_id = ::std::option::Option::Some(is.read_int64()?);
                },
                34 => {
                    self.tag_name = is.read_string()?;
                },
                42 => {
                    self.string_value = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.int_value = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.tag_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.tag_id);
        }
        if let Some(v) = self.music_item_id {
            my_size += ::protobuf::rt::int64_size(2, v);
        }
        if let Some(v) = self.folder_id {
            my_size += ::protobuf::rt::int64_size(3, v);
        }
        if !self.tag_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.tag_name);
        }
        if let Some(v) = self.string_value.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.int_value {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.tag_id != 0 {
            os.write_int64(1, self.tag_id)?;
        }
        if let Some(v) = self.music_item_id {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.folder_id {
            os.write_int64(3, v)?;
        }
        if !self.tag_name.is_empty() {
            os.write_string(4, &self.tag_name)?;
        }
        if let Some(v) = self.string_value.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.int_value {
            os.write_int32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TagsRow {
        TagsRow::new()
    }

    fn clear(&mut self) {
        self.tag_id = 0;
        self.music_item_id = ::std::option::Option::None;
        self.folder_id = ::std::option::Option::None;
        self.tag_name.clear();
        self.string_value = ::std::option::Option::None;
        self.int_value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TagsRow {
        static instance: TagsRow = TagsRow {
            tag_id: 0,
            music_item_id: ::std::option::Option::None,
            folder_id: ::std::option::Option::None,
            tag_name: ::std::string::String::new(),
            string_value: ::std::option::Option::None,
            int_value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TagsRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TagsRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TagsRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TagsRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MusicFilesRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MusicFilesRow {
    // message fields
    // @@protoc_insertion_point(field:MusicFilesRow.id)
    pub id: i64,
    // @@protoc_insertion_point(field:MusicFilesRow.internal_file_id)
    pub internal_file_id: i64,
    // @@protoc_insertion_point(field:MusicFilesRow.file_type)
    pub file_type: ::protobuf::EnumOrUnknown<MusicFileType>,
    // special fields
    // @@protoc_insertion_point(special_field:MusicFilesRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MusicFilesRow {
    fn default() -> &'a MusicFilesRow {
        <MusicFilesRow as ::protobuf::Message>::default_instance()
    }
}

impl MusicFilesRow {
    pub fn new() -> MusicFilesRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &MusicFilesRow| { &m.id },
            |m: &mut MusicFilesRow| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "internal_file_id",
            |m: &MusicFilesRow| { &m.internal_file_id },
            |m: &mut MusicFilesRow| { &mut m.internal_file_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_type",
            |m: &MusicFilesRow| { &m.file_type },
            |m: &mut MusicFilesRow| { &mut m.file_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MusicFilesRow>(
            "MusicFilesRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MusicFilesRow {
    const NAME: &'static str = "MusicFilesRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                16 => {
                    self.internal_file_id = is.read_int64()?;
                },
                24 => {
                    self.file_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if self.internal_file_id != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.internal_file_id);
        }
        if self.file_type != ::protobuf::EnumOrUnknown::new(MusicFileType::MP3) {
            my_size += ::protobuf::rt::int32_size(3, self.file_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if self.internal_file_id != 0 {
            os.write_int64(2, self.internal_file_id)?;
        }
        if self.file_type != ::protobuf::EnumOrUnknown::new(MusicFileType::MP3) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.file_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MusicFilesRow {
        MusicFilesRow::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.internal_file_id = 0;
        self.file_type = ::protobuf::EnumOrUnknown::new(MusicFileType::MP3);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MusicFilesRow {
        static instance: MusicFilesRow = MusicFilesRow {
            id: 0,
            internal_file_id: 0,
            file_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MusicFilesRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MusicFilesRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MusicFilesRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MusicFilesRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MusicLinksRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MusicLinksRow {
    // message fields
    // @@protoc_insertion_point(field:MusicLinksRow.id)
    pub id: i64,
    // @@protoc_insertion_point(field:MusicLinksRow.music_item_id)
    pub music_item_id: i64,
    // @@protoc_insertion_point(field:MusicLinksRow.link)
    pub link: ::std::string::String,
    // @@protoc_insertion_point(field:MusicLinksRow.link_type)
    pub link_type: ::protobuf::EnumOrUnknown<MusicLinkType>,
    // special fields
    // @@protoc_insertion_point(special_field:MusicLinksRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MusicLinksRow {
    fn default() -> &'a MusicLinksRow {
        <MusicLinksRow as ::protobuf::Message>::default_instance()
    }
}

impl MusicLinksRow {
    pub fn new() -> MusicLinksRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &MusicLinksRow| { &m.id },
            |m: &mut MusicLinksRow| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "music_item_id",
            |m: &MusicLinksRow| { &m.music_item_id },
            |m: &mut MusicLinksRow| { &mut m.music_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "link",
            |m: &MusicLinksRow| { &m.link },
            |m: &mut MusicLinksRow| { &mut m.link },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "link_type",
            |m: &MusicLinksRow| { &m.link_type },
            |m: &mut MusicLinksRow| { &mut m.link_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MusicLinksRow>(
            "MusicLinksRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MusicLinksRow {
    const NAME: &'static str = "MusicLinksRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                16 => {
                    self.music_item_id = is.read_int64()?;
                },
                26 => {
                    self.link = is.read_string()?;
                },
                32 => {
                    self.link_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if self.music_item_id != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.music_item_id);
        }
        if !self.link.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.link);
        }
        if self.link_type != ::protobuf::EnumOrUnknown::new(MusicLinkType::EXTERNAL_FILE) {
            my_size += ::protobuf::rt::int32_size(4, self.link_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if self.music_item_id != 0 {
            os.write_int64(2, self.music_item_id)?;
        }
        if !self.link.is_empty() {
            os.write_string(3, &self.link)?;
        }
        if self.link_type != ::protobuf::EnumOrUnknown::new(MusicLinkType::EXTERNAL_FILE) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.link_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MusicLinksRow {
        MusicLinksRow::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.music_item_id = 0;
        self.link.clear();
        self.link_type = ::protobuf::EnumOrUnknown::new(MusicLinkType::EXTERNAL_FILE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MusicLinksRow {
        static instance: MusicLinksRow = MusicLinksRow {
            id: 0,
            music_item_id: 0,
            link: ::std::string::String::new(),
            link_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MusicLinksRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MusicLinksRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MusicLinksRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MusicLinksRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PlaylistsRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlaylistsRow {
    // message fields
    // @@protoc_insertion_point(field:PlaylistsRow.playlist_id)
    pub playlist_id: i64,
    // @@protoc_insertion_point(field:PlaylistsRow.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:PlaylistsRow.avatar_picture_id)
    pub avatar_picture_id: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:PlaylistsRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlaylistsRow {
    fn default() -> &'a PlaylistsRow {
        <PlaylistsRow as ::protobuf::Message>::default_instance()
    }
}

impl PlaylistsRow {
    pub fn new() -> PlaylistsRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "playlist_id",
            |m: &PlaylistsRow| { &m.playlist_id },
            |m: &mut PlaylistsRow| { &mut m.playlist_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PlaylistsRow| { &m.name },
            |m: &mut PlaylistsRow| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "avatar_picture_id",
            |m: &PlaylistsRow| { &m.avatar_picture_id },
            |m: &mut PlaylistsRow| { &mut m.avatar_picture_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlaylistsRow>(
            "PlaylistsRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlaylistsRow {
    const NAME: &'static str = "PlaylistsRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.playlist_id = is.read_int64()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                24 => {
                    self.avatar_picture_id = ::std::option::Option::Some(is.read_int64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.playlist_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.playlist_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if let Some(v) = self.avatar_picture_id {
            my_size += ::protobuf::rt::int64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.playlist_id != 0 {
            os.write_int64(1, self.playlist_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if let Some(v) = self.avatar_picture_id {
            os.write_int64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlaylistsRow {
        PlaylistsRow::new()
    }

    fn clear(&mut self) {
        self.playlist_id = 0;
        self.name.clear();
        self.avatar_picture_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlaylistsRow {
        static instance: PlaylistsRow = PlaylistsRow {
            playlist_id: 0,
            name: ::std::string::String::new(),
            avatar_picture_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlaylistsRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlaylistsRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlaylistsRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlaylistsRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:PlaylistItemsRow)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PlaylistItemsRow {
    // message fields
    // @@protoc_insertion_point(field:PlaylistItemsRow.playlist_item_id)
    pub playlist_item_id: i64,
    // @@protoc_insertion_point(field:PlaylistItemsRow.playlist_id)
    pub playlist_id: i64,
    // @@protoc_insertion_point(field:PlaylistItemsRow.music_item_id)
    pub music_item_id: ::std::option::Option<i64>,
    // special fields
    // @@protoc_insertion_point(special_field:PlaylistItemsRow.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlaylistItemsRow {
    fn default() -> &'a PlaylistItemsRow {
        <PlaylistItemsRow as ::protobuf::Message>::default_instance()
    }
}

impl PlaylistItemsRow {
    pub fn new() -> PlaylistItemsRow {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "playlist_item_id",
            |m: &PlaylistItemsRow| { &m.playlist_item_id },
            |m: &mut PlaylistItemsRow| { &mut m.playlist_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "playlist_id",
            |m: &PlaylistItemsRow| { &m.playlist_id },
            |m: &mut PlaylistItemsRow| { &mut m.playlist_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "music_item_id",
            |m: &PlaylistItemsRow| { &m.music_item_id },
            |m: &mut PlaylistItemsRow| { &mut m.music_item_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlaylistItemsRow>(
            "PlaylistItemsRow",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlaylistItemsRow {
    const NAME: &'static str = "PlaylistItemsRow";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.playlist_item_id = is.read_int64()?;
                },
                16 => {
                    self.playlist_id = is.read_int64()?;
                },
                24 => {
                    self.music_item_id = ::std::option::Option::Some(is.read_int64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.playlist_item_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.playlist_item_id);
        }
        if self.playlist_id != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.playlist_id);
        }
        if let Some(v) = self.music_item_id {
            my_size += ::protobuf::rt::int64_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.playlist_item_id != 0 {
            os.write_int64(1, self.playlist_item_id)?;
        }
        if self.playlist_id != 0 {
            os.write_int64(2, self.playlist_id)?;
        }
        if let Some(v) = self.music_item_id {
            os.write_int64(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlaylistItemsRow {
        PlaylistItemsRow::new()
    }

    fn clear(&mut self) {
        self.playlist_item_id = 0;
        self.playlist_id = 0;
        self.music_item_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlaylistItemsRow {
        static instance: PlaylistItemsRow = PlaylistItemsRow {
            playlist_item_id: 0,
            playlist_id: 0,
            music_item_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlaylistItemsRow {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlaylistItemsRow").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlaylistItemsRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlaylistItemsRow {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:PictureType)
pub enum PictureType {
    // @@protoc_insertion_point(enum_value:PictureType.JPG)
    JPG = 0,
    // @@protoc_insertion_point(enum_value:PictureType.PNG)
    PNG = 1,
    // @@protoc_insertion_point(enum_value:PictureType.GIF)
    GIF = 2,
    // @@protoc_insertion_point(enum_value:PictureType.WEBP)
    WEBP = 3,
    // @@protoc_insertion_point(enum_value:PictureType.BMP)
    BMP = 4,
    // @@protoc_insertion_point(enum_value:PictureType.AVIF)
    AVIF = 5,
}

impl ::protobuf::Enum for PictureType {
    const NAME: &'static str = "PictureType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PictureType> {
        match value {
            0 => ::std::option::Option::Some(PictureType::JPG),
            1 => ::std::option::Option::Some(PictureType::PNG),
            2 => ::std::option::Option::Some(PictureType::GIF),
            3 => ::std::option::Option::Some(PictureType::WEBP),
            4 => ::std::option::Option::Some(PictureType::BMP),
            5 => ::std::option::Option::Some(PictureType::AVIF),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<PictureType> {
        match str {
            "JPG" => ::std::option::Option::Some(PictureType::JPG),
            "PNG" => ::std::option::Option::Some(PictureType::PNG),
            "GIF" => ::std::option::Option::Some(PictureType::GIF),
            "WEBP" => ::std::option::Option::Some(PictureType::WEBP),
            "BMP" => ::std::option::Option::Some(PictureType::BMP),
            "AVIF" => ::std::option::Option::Some(PictureType::AVIF),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PictureType] = &[
        PictureType::JPG,
        PictureType::PNG,
        PictureType::GIF,
        PictureType::WEBP,
        PictureType::BMP,
        PictureType::AVIF,
    ];
}

impl ::protobuf::EnumFull for PictureType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PictureType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PictureType {
    fn default() -> Self {
        PictureType::JPG
    }
}

impl PictureType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PictureType>("PictureType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:MusicFileType)
pub enum MusicFileType {
    // @@protoc_insertion_point(enum_value:MusicFileType.MP3)
    MP3 = 0,
    // @@protoc_insertion_point(enum_value:MusicFileType.FLAC)
    FLAC = 1,
}

impl ::protobuf::Enum for MusicFileType {
    const NAME: &'static str = "MusicFileType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MusicFileType> {
        match value {
            0 => ::std::option::Option::Some(MusicFileType::MP3),
            1 => ::std::option::Option::Some(MusicFileType::FLAC),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<MusicFileType> {
        match str {
            "MP3" => ::std::option::Option::Some(MusicFileType::MP3),
            "FLAC" => ::std::option::Option::Some(MusicFileType::FLAC),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MusicFileType] = &[
        MusicFileType::MP3,
        MusicFileType::FLAC,
    ];
}

impl ::protobuf::EnumFull for MusicFileType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MusicFileType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MusicFileType {
    fn default() -> Self {
        MusicFileType::MP3
    }
}

impl MusicFileType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MusicFileType>("MusicFileType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:MusicLinkType)
pub enum MusicLinkType {
    // @@protoc_insertion_point(enum_value:MusicLinkType.EXTERNAL_FILE)
    EXTERNAL_FILE = 0,
    // @@protoc_insertion_point(enum_value:MusicLinkType.URL)
    URL = 1,
}

impl ::protobuf::Enum for MusicLinkType {
    const NAME: &'static str = "MusicLinkType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MusicLinkType> {
        match value {
            0 => ::std::option::Option::Some(MusicLinkType::EXTERNAL_FILE),
            1 => ::std::option::Option::Some(MusicLinkType::URL),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<MusicLinkType> {
        match str {
            "EXTERNAL_FILE" => ::std::option::Option::Some(MusicLinkType::EXTERNAL_FILE),
            "URL" => ::std::option::Option::Some(MusicLinkType::URL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MusicLinkType] = &[
        MusicLinkType::EXTERNAL_FILE,
        MusicLinkType::URL,
    ];
}

impl ::protobuf::EnumFull for MusicLinkType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MusicLinkType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MusicLinkType {
    fn default() -> Self {
        MusicLinkType::EXTERNAL_FILE
    }
}

impl MusicLinkType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MusicLinkType>("MusicLinkType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10collection.proto\"\xcf\x01\n\nFoldersRow\x12\x1b\n\tfolder_id\x18\
    \x01\x20\x01(\x03R\x08folderId\x12(\n\x10parent_folder_id\x18\x02\x20\
    \x01(\x03R\x0eparentFolderId\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04na\
    me\x12\x1f\n\x0bfolder_type\x18\x04\x20\x01(\x05R\nfolderType\x12/\n\x11\
    avatar_picture_id\x18\x05\x20\x01(\x03H\0R\x0favatarPictureId\x88\x01\
    \x01B\x14\n\x12_avatar_picture_id\"P\n\x10InternalFilesRow\x12\x17\n\x07\
    file_id\x18\x01\x20\x01(\x03R\x06fileId\x12#\n\rinternal_path\x18\x02\
    \x20\x01(\tR\x0cinternalPath\"d\n\rMusicItemsRow\x12\"\n\rmusic_item_id\
    \x18\x01\x20\x01(\x03R\x0bmusicItemId\x12\x12\n\x04name\x18\x02\x20\x01(\
    \tR\x04name\x12\x1b\n\tfolder_id\x18\x03\x20\x01(\x03R\x08folderId\"w\n\
    \x0eLyricsItemsRow\x12$\n\x0elyrics_item_id\x18\x01\x20\x01(\x03R\x0clyr\
    icsItemId\x12\"\n\rmusic_item_id\x18\x02\x20\x01(\x03R\x0bmusicItemId\
    \x12\x1b\n\tlang_code\x18\x03\x20\x01(\tR\x08langCode\"\x99\x01\n\x0fPic\
    tureItemsRow\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12\x1b\n\tfold\
    er_id\x18\x03\x20\x01(\x03R\x08folderId\x12(\n\x10internal_file_id\x18\
    \x04\x20\x01(\x03R\x0einternalFileId\x12/\n\x0cpicture_type\x18\x05\x20\
    \x01(\x0e2\x0c.PictureTypeR\x0bpictureType\"\x8f\x02\n\x07TagsRow\x12\
    \x15\n\x06tag_id\x18\x01\x20\x01(\x03R\x05tagId\x12'\n\rmusic_item_id\
    \x18\x02\x20\x01(\x03H\0R\x0bmusicItemId\x88\x01\x01\x12\x20\n\tfolder_i\
    d\x18\x03\x20\x01(\x03H\x01R\x08folderId\x88\x01\x01\x12\x19\n\x08tag_na\
    me\x18\x04\x20\x01(\tR\x07tagName\x12&\n\x0cstring_value\x18\x05\x20\x01\
    (\tH\x02R\x0bstringValue\x88\x01\x01\x12\x20\n\tint_value\x18\x06\x20\
    \x01(\x05H\x03R\x08intValue\x88\x01\x01B\x10\n\x0e_music_item_idB\x0c\n\
    \n_folder_idB\x0f\n\r_string_valueB\x0c\n\n_int_value\"v\n\rMusicFilesRo\
    w\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12(\n\x10internal_file_id\
    \x18\x02\x20\x01(\x03R\x0einternalFileId\x12+\n\tfile_type\x18\x03\x20\
    \x01(\x0e2\x0e.MusicFileTypeR\x08fileType\"\x84\x01\n\rMusicLinksRow\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12\"\n\rmusic_item_id\x18\x02\
    \x20\x01(\x03R\x0bmusicItemId\x12\x12\n\x04link\x18\x03\x20\x01(\tR\x04l\
    ink\x12+\n\tlink_type\x18\x04\x20\x01(\x0e2\x0e.MusicLinkTypeR\x08linkTy\
    pe\"\x8a\x01\n\x0cPlaylistsRow\x12\x1f\n\x0bplaylist_id\x18\x01\x20\x01(\
    \x03R\nplaylistId\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12/\n\
    \x11avatar_picture_id\x18\x03\x20\x01(\x03H\0R\x0favatarPictureId\x88\
    \x01\x01B\x14\n\x12_avatar_picture_id\"\x98\x01\n\x10PlaylistItemsRow\
    \x12(\n\x10playlist_item_id\x18\x01\x20\x01(\x03R\x0eplaylistItemId\x12\
    \x1f\n\x0bplaylist_id\x18\x02\x20\x01(\x03R\nplaylistId\x12'\n\rmusic_it\
    em_id\x18\x03\x20\x01(\x03H\0R\x0bmusicItemId\x88\x01\x01B\x10\n\x0e_mus\
    ic_item_id*E\n\x0bPictureType\x12\x07\n\x03JPG\x10\0\x12\x07\n\x03PNG\
    \x10\x01\x12\x07\n\x03GIF\x10\x02\x12\x08\n\x04WEBP\x10\x03\x12\x07\n\
    \x03BMP\x10\x04\x12\x08\n\x04AVIF\x10\x05*\"\n\rMusicFileType\x12\x07\n\
    \x03MP3\x10\0\x12\x08\n\x04FLAC\x10\x01*+\n\rMusicLinkType\x12\x11\n\rEX\
    TERNAL_FILE\x10\0\x12\x07\n\x03URL\x10\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(FoldersRow::generated_message_descriptor_data());
            messages.push(InternalFilesRow::generated_message_descriptor_data());
            messages.push(MusicItemsRow::generated_message_descriptor_data());
            messages.push(LyricsItemsRow::generated_message_descriptor_data());
            messages.push(PictureItemsRow::generated_message_descriptor_data());
            messages.push(TagsRow::generated_message_descriptor_data());
            messages.push(MusicFilesRow::generated_message_descriptor_data());
            messages.push(MusicLinksRow::generated_message_descriptor_data());
            messages.push(PlaylistsRow::generated_message_descriptor_data());
            messages.push(PlaylistItemsRow::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(PictureType::generated_enum_descriptor_data());
            enums.push(MusicFileType::generated_enum_descriptor_data());
            enums.push(MusicLinkType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
